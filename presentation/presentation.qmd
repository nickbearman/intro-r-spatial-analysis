---
title: "Introduction to Spatial Data & Using R as a GIS"
subtitle: "Day 1 |Tue 4th March 2025 | 10am - 1pm"
author: "Dr Nick Bearman"
format: 
  revealjs
---

![](images/WelcomeToInStats.png)

## 


![](images/InStatsStart.png)

## <!-- Blank slide -->


## Welcome - GIS Course

- Day 1 - Introduction to Spatial Data & Using R as a GIS

- Session 1 - Introduction to R and Spatial Data Basics

- Dr Nick Bearman

<!--
- Day 2 - Confident Spatial Analysis and Statistics in R & GeoDa 

--
 
- *Lunch 12:30pm - 1:30pm* 
- *Afternoon break 3:15pm - 3:30pm* 
-->

<!--
![](images/ncrm-welcome-slide1.png)

------------------------------------------------------------------------


![](images/ncrm-welcome-slide2.png)
-->

<!--

## Recording

- I will record the session on Zoom
- Share the recording with you
- Feel free to download and use for your reference
- But please don't pass on to other people

-->

## What are we covering?

-   Background on R and RStudio
-   Load spatial data
-   Create a map
-   Basic analysis
-   Using your own data

![](images/rstudio-map.png){.absolute bottom="0" right="0" width="500"}

<!-- online course 

## Housekeeping

-   Zoom etiquette
-   We're a small group,
    -   We can discuss things as we go along.
-   Mute yourself (unless asking a question)
-   Video on (if possible)
-   Questions - ask in real time, or in the chat
-   Recording -- only our group, available for 3 months
-   Workbook, data and presentation all in OneDrive
-   Poll
-->

<!-- InStats course -->

## Housekeeping

-   Zoom etiquette
-   We're a small group - we can discuss things as we go along.
-   Mute yourself (unless asking a question)
-   Video on (if possible)
-   Questions - ask in real time, or in the chat
-   Recording - any questions you ask will be in the recording (audio), your video will not be in the recording. 


<!-- in person course

## Housekeeping

-   No fire alarm planned
-   Introductions
    -   Name / background / area of interest
    -   Have you done any GIS before? (no is fine!)
    -   What would you like from the course? <!-- -   What you would like from the course -->

## Housekeeping

-   Have presentation and practical sessions
    -   Ask questions as we go along
    -   Think about how you could use these techniques with your own data
-   Presentations, handouts and data on <!-- OneDrive --> InStats
<!-- - WhatsApp group for discussion -->
-   Poll

```{=html}
<!-- 

-   Be aware of trailing wires
-   Photos for social media
-   Presentations, handouts and data on OneDrive
    -   tinyurl.com/methodsconqgis
-->
```

<!-- Online

## Outline  {.smaller}

-   **Day 1**:
    -   10:00am - 10:45am -- What is GIS & R?
    -   10:45am - 11:30am -- Practical 1: Intro to R & GIS
    -   11:30am - 11:45am -- break
    -   11:45am - 12:05pm -- Classification
    -   12:05pm - 1:00pm -- Practical 2: Making a Map
-   Day 2:
    -   1:00pm - 1:20pm -- Recap and Making Maps
    -   1:20pm - 2:30pm -- Practical 3: Clustering of Crime Points
    -   2:30pm - 2:45pm -- break
    -   2:45pm - 4:00pm -- Practical 4: Bring Your Own Data

-->

<!-- InStats -->

## Outline  {.smaller}

-   **Day 1** - **Session 1: Introduction to R and Spatial Data Basics**
-   **Day 1** - Session 2: Classification and Creating a Choropleth Map
-   Day 2 - Session 3: Map Customisation and Automation in R
-   Day 2 - Session 4: Clustering Crime Points and Working with Your Own Data


## Outline  {.smaller}

-   **Day 1** - **Session 1: Introduction to R and Spatial Data Basics**
    -   10:00am - 10:45am -- What is GIS & R?
    -   10:45am - 11:30am -- Practical 1: Intro to R & GIS
    -   *11:30am - 11:45am -- break*
-   **Day 1** Session 2: Classification and Creating a Choropleth Map
    -   11:45am - 12:05pm -- Classification
    -   12:05pm - 1:00pm -- Practical 2: Making a Map

    
<!-- InStats

## Outline  {.smaller}

-   **Day 1** - Session 1: Introduction to R and Spatial Dat Basics
    -   10:00am - 10:45am -- What is GIS & R?
    -   10:45am - 11:30am -- Practical 1: Intro to R & GIS
    -   *11:30am - 11:45am -- break*
-   **Day 1** Session 2: Classification and Creating a Choropleth Map
    -   11:45am - 12:05pm -- Classification
    -   12:05pm - 1:00pm -- Practical 2: Making a Map
-   Day 2 - Session 3: Map Customisation and Automation in R
    -   1:00pm - 1:20pm -- Recap and Making Maps
    -   1:20pm - 2:30pm -- Practical 3: Clustering of Crime Points
    -   *2:30pm - 2:45pm -- break*
-   Day 2 - Session 4: Clustering Crime Points and Working with Your Own Data
    -   2:45pm - 4:00pm -- Practical 4: Bring Your Own Data
-->
<!--

## Outline  {.smaller}

- 10:00am – 10:45am: What is GIS, Spatial Data & R?
- 10:45am – 11:30am: Practical 1: Intro to R & GIS
- 11:30am – 11:50am: Classification discussion
- 11:50am – 12:30pm: Practical 2: Making a Map
- 12:30pm - 1:30pm: Lunch
- 1:30pm – 2:00pm: Recap & Making Maps
- 2:00pm – 3:15pm: Practical 3: Clustering of Crime Points
- 3:15pm – 3:30pm: break
- 4:00pm - 4:30pm: Practical 4: Bring Your Own Data

--> 

## Introductions

- Name
- Background
- Have you done any GIS or R before? *No is fine!*
- What would you like from this course?

## Any Questions?


-   Zoom?
-   Accessing files?
<!-- -   OneDrive? -->
<!-- -   WhatsApp Group? -->

-   Schedule?
-   ?

## 

<center><h1>Introduction to Spatial Data and R as a GIS</h1></center>

<p> <center>--</center>

<center> <h3>Session 1: Introduction to R and Spatial Data Basics</h3></center>

## What is GIS?

-   Geographic Information Systems
-   Turning (spatial) data into information ![](images/turning-data-into-information.png)
-   Using this information to answer (research) questions
    -   *"How have housing conditions changed in the past ten years?"*

## What can a GIS can answer?

![](images/types-of-questions-a-gis-can-answer.jpg)\
<font size="2">Kraak & Ormeling (2003) p.7.</font>

## What is GIS?

![](images/what-is-gis.png)\
<font size="2">http://www.flickr.com/photos/dsleeter_2000/3097476532 & ESRI Course "Teaching with GIS"</font>

## GIS

-   Nearly all human activities & decisions involve geography
    -   the "**where?**"
-   Working with geographic information is **different** to working with a **CSV** or **Excel** file
-   This is why we need specialized **GIS** software to:
    -   **organize** and **store**
    -   **access** and **retrieve**
    -   **present** and **manage** spatial data
-   But ultimately to apply to the solution of our **problem**

## GIS can be applied to many many many different areas

------------------------------------------------------------------------

## Weather

![](images/weather.png)

<font size="2">Tomorrows Weather - https://dominicroye.github.io/en/2023/tomorrows-weather/?utm_source=puntofisso&utm_medium=email</font>

## Kenya Vegetation

![](images/kenya-vegetation.png)

<font size="2">Kenya Vegetation Figure 1 - http://pvanb.wordpress.com/2010/06/10/clickfu-in-qgis/</font>

## Census 2021

::: columns
:::: {.column width="50%"}

![](images/census-2021.png)

			
										
												  
   

<font size="2">https://www.ons.gov.uk/visualisations/censuspopulationchange/E08000012/</font>
																			
										 
																		   
   

::::
																 
   

:::: {.column width="50%"}

![](images/census-2021-liverpool.png)
							   
   

<font size="2">https://www.ons.gov.uk/census/maps/choropleth/population/median-age/median-age/median-age?lad=E08000012</font>
						   
   

::::
	   
:::

---

## Poverty in Africa

![](images/africa-poverty.png)

<font size="2">http://pvanb.wordpress.com/2012/05/09/poverty-maps-on-harvestchoice/ </font>

---

## GIS: Systems and Science

::: {.fragment}
- Geographical Information **Systems** 
  - The methods, process and technology we use
:::

::: {.fragment}
- Geographical Information **Science** <!-- .element: class="fragment" -->
  - The science behind the technology
  - Including development of new technology, <br> methods and processes
:::

::: {.fragment}
 ![](images/ijgis-1987.jpg){.absolute bottom="0" right="250" width="250"} 
 ![](images/ijgis.png){.absolute bottom="0" right="0" width="250"} 

<font size="2">Thanks to Nick Tate for the IGJIS 1987 photo</font>
:::
 

## GIS: Systems and Science

::: fragment
-   Geographic*al* / Geographic
:::

::: fragment
-   Geographic Data Science
:::

::: {.fragment}
- GeoAI
  - Geographical Analysis
  - LLM / ChatGPT / assistant
    - [Kue: AI Chatbot for QGIS](https://www.linkedin.com/feed/update/urn:li:activity:7292210014490951683/)
:::

------------------------------------------------------------------------

## R as a GIS

-   Command line driven, rather than GUI

-   Disadvantages

    -   Remembering commands
    -   Glossary
    -   Steeper learning curve

    ![](images/r-glossary.png){.absolute bottom="0" right="0" width="500"}

## R as a GIS

-   Advantages
    -   Easy to record what you did and repeat specific pieces of work
    -   Lots of reproducible examples on the web
    -   Easily scriptable
    -   134,567 maps? Easy!
        -   *354 areas X \~392 variables*
    -   2011 Census Open Atlas

------------------------------------------------------------------------

![](images/census-open-atlas-1.png)

------------------------------------------------------------------------

![](images/census-open-atlas-2.png)

------------------------------------------------------------------------

![](images/census-open-atlas-3.png)

------------------------------------------------------------------------

![](images/census-open-atlas-4.png)

------------------------------------------------------------------------

![](images/topography.png)

------------------------------------------------------------------------

![](images/population.png)

<font size="2">https://gist.github.com/halhen/659780120accd82e043986c8b57deae0/</font>

------------------------------------------------------------------------

![](images/population_code.png)

<font size="2">https://gist.github.com/halhen/659780120accd82e043986c8b57deae0/</font>

## GIS Software

![](images/gis-software.png)\

-   R is different to ArcGIS, but can do the same analysis
-   R is free (as is QGIS)
-   R is increasingly popular in the academic and commercial (data-science) sector
-   Python is also another popular option
-   *All can be useful - Try data in QGIS / ArcGIS if you like*

## Projections

-   Projection - going from a sphere to a flat surface

![](images/globe-flat-surface.png)

<font size="2">http://www.primap.com/wsen/Maps/MapCollection/WorldMaps/Globe-(Europe-centered)-Vegetation-4000x4000.html</font>

------------------------------------------------------------------------

## Projections

-   Projection - going from a sphere to a flat surface

![](images/orange.png)

<font size="2">http://www.hdwallpapersos.com/orange-fruit-hd-wallpapers.html</font>

------------------------------------------------------------------------

## Mercator Projection

![](images/mercator-1.png)

------------------------------------------------------------------------

![](images/mercator-peters.png)

------------------------------------------------------------------------

![](images/mercator-globe.png)

------------------------------------------------------------------------

![](images/mercator-peters.png)

------------------------------------------------------------------------

![](images/mercator-peters-2.png)

------------------------------------------------------------------------

![](images/mercator-2.png)

------------------------------------------------------------------------

##

![](images/ch2-projections.png)


## Why are Projections important?

::: fragment
1.  The map(s) may not be as they appear
:::

::: fragment
2.  Data may appear in the wrong place
:::

------------------------------------------------------------------------

![](images/base-map.png)

------------------------------------------------------------------------

![](images/base-map-uk-data.png)

------------------------------------------------------------------------

## Why are Projections important?

1.  The map(s) may not be as they appear
2.  Data may appear in the wrong place
3.  Coordinate Systems

## Coordinate Systems

Latitude and Longitude (WGS 1984)

*52°N 37' 30.32'' (52.6250) 1°E 14' 2.05'' (1.2339)*

![](images/lat-lng.png)

## Coordinate Systems

British National Grid

*Easting: 619301 Northing: 307416*

![](images/bng.png)

## Coordinate Systems

UTM (Universal Transverse Mercator)

*621160.98, 3349893.53 meters, Zone 31 N*

![](images/utm.png)

## Coordinate Systems

UTM (Universal Transverse Mercator)

*621160.98, 3349893.53 meters, Zone 31 N*

![](images/utm-europe.png)

## Geographic and Projected Coordinate Systems

We can split these coordinate systems into two groups:

- Geographic Coordinate Systems
- Projected Coordinate Systems

## Geographic and Projected Coordinate Systems

- **Geographic Coordinate Systems**
  - Where on the Earth’s surface something is
  - 52°N 37’ 30.32’’ (52.6250)	1°E 14’ 2.05’’ (1.2339) 
  - Usually in angular units (degrees)

## Geographic and Projected Coordinate Systems

 ![](images/distance-lines-longitude.jfif){width="500"}  
 
 <font size="2">Thanks to [@RickyAngueira](https://twitter.com/RickyAngueira) from [#30DayMapChallenge on Twitter](https://twitter.com/RickyAngueira/status/1594030866132410368?t=Mljsd9aPHr7IzLTrp3o45A&s=09). 
</font>

## Geographic and Projected Coordinate Systems

- **Geographic Coordinate Systems**
  - Where on the Earth’s surface something is
  - 52°N 37’ 30.32’’ (52.6250)	1°E 14’ 2.05’’ (1.2339) 
  - Usually in angular units (degrees)
- **Projected Coordinate Systems**
  - How we show this on a printed/flat map
  - Easting: 619301	Northing: 307416
  - Usually in linear units (meters)
  
## Coordinate Systems

- **Geographic** : Latitude and Longitude (WGS 1984)
  - 52.6250°	1.2339° **EPSG: 4326**
- **Projected Coordinate Systems**
  - British National Grid (Eastings & Northings)
    - Easting: 619301	Northing: 307416 **EPSG: 27700**
  - UTM (Universal Transverse Mercator)
    - 621160.98, 3349893.53 meters, Zone 14 N **EPSG: depends on zone**
- https://epsg.org/ | https://epsg.io/ 

## Coordinate Systems

-   Why is it important?
    -   Some data uses WGS84, some BNG, UTM
    -   OS & Census data use BNG (Eastings/Northings)
    -   Need to convert between the two
-   Some GIS convert automatically -- **R does not**

## Which system to use?

- For Global data, projections are key
  - WGS 84 EPSG:4326 Mercator 
  - *ESPG: 3857 Web Mercator*
  - Try WGS 84 / Equal Earth Greenwich EPSG:8857

- For Local data, projections are less important
  - We are using Projected Coordinate System
  
  
- We can convert data between projection systems


------------------------------------------------------------------------

![](images/joining-1.png)

------------------------------------------------------------------------

![](images/joining-2.png)

------------------------------------------------------------------------

![](images/joining-3.png)

------------------------------------------------------------------------

![](images/joining-4.png)

## Attribute Join

-   The attribute is key
-   It must match **exactly**
    -   "Gambia, The" ≠ "The Gambia"
    -   "USA" ≠ "The United States"
    -   "UK" ≠ "Great Britain"

## Attribute Join

-   Codes (ISO3) can help

![](images/iso-codes.png){.absolute left="0"}

::: footer
https://twitter.com/zevross/status/1118967279864242176</font>
:::

## Attribute Join

-   Is an issue in many different places

![](images/irish-names.png){.absolute}

------------------------------------------------------------------------

![](images/rstudio.png)

------------------------------------------------------------------------

## Working Directory

-   R uses a 'working directory' to store your files in
-   You might have a different one for each project / piece of work
    -   e.g. C:\\Documents\\GIS
    -   `setwd("C:\Documents\GIS")`

## Variables

-   R uses variables to store information

-   listed in your 'workspace' or 'environment' (top-right)

-   `house.prices <- c(120,150,212, 99,199,299,159)`

------------------------------------------------------------------------

## Variables and Assignment

`house.prices` `<-` `c(120,150,212, 99,199,299,159)`

## Variables and Assignment

**`house.prices`** `<-` `c(120,150,212, 99,199,299,159)`

## Variables and Assignment

`house.prices` **`<-`** `c(120,150,212, 99,199,299,159)`

## Variables and Assignment

`house.prices` `<-` **`c(120,150,212, 99,199,299,159)`**

## Variables and Assignment

`sthelens` `<-` `st_read("sthelens.shp")`

## Variables and Assignment

**`sthelens`** `<-` `st_read("sthelens.shp")`

## Variables and Assignment

`sthelens` **`<-`** `st_read("sthelens.shp")`

## Variables and Assignment

`sthelens` `<-` **`st_read("sthelens.shp")`**

## Variables and Assignment

`sthelens` `<-` **`st_read("sthelens.shp")`**

\- See glossary for details

\- Case sensitive

\- StHelens ≠ sthelens ≠ STHELENS

## Data Formats
- Data frames are like a table or spreadsheet
- `dataframe[rows,cols]`
- `dataframe[1,]` first row
- `dataframe[,1]` first col

## Libraries
- R uses libraries to extend what it can do
- There are several GIS libraries
- If you are using your own machine
	- You will need to install the libraries
	- `install.packages(“sf”)`
- You will also need to load the libraries
	- `library(sf)`

---

![](images/r-libraries.jpeg) 

<font size="2">https://twitter.com/visnut/status/1248087845589274624</font>

## `tmap` v4

- `tmap` is the library we use for creating maps
- v4 is still in development
- When you load it: `library(tmap)`
- The `tmap` library may give you this message:


![](images/tmap-v4-testing.png)

- We will stick with v3.3-4 (which is what you installed)
- Will mention more about `tmap` v4 later on. 

## Practical 1: Intro to R & GIS 

### Practical Approach

- (Primarily) self-led practical  
- Good to explore the options
- Ask questions as we go through
- Try things
- Use the help `?command`

## Typing out the Code
						
- Why do I make you type out code?
- Helps the learning process
- Make you think about what the code does
- *(but you can copy/paste long bits)*
- Optional exercises

## Housekeeping - Practicals

- Work through the workbook (questions, optional exercises)
- Will split into groups of ~2-3 people (breakout rooms)
- Ask your group colleagues questions
<!-- - Post in WhatsApp -->

- Use the ‘Ask for help’ button in the Breakout room
- I will ‘walk around’ and see how people are getting on
- Can share screens – in groups, or individually
- Breaks

## Let's start!

## Outline  {.smaller}

-   **Day 1** - **Session 1: Introduction to R and Spatial Data Basics**
    -   ~~10:00am - 10:45am -- What is GIS & R?~~
    -   10:45am - 11:30am -- Practical 1: Intro to R & GIS
    -   *11:30am - 11:45am -- break*
-   **Day 1** Session 2: Classification and Creating a Choropleth Map
    -   11:45am - 12:05pm -- Classification
    -   12:05pm - 1:00pm -- Practical 2: Making a Map

    

<!--  NCRM
## Outline {.smaller}

-   **Day 1**:
    -   ~~10:00am - 10:45am -- What is GIS & R?~~
    -   ~~10:45am - 11:30am -- Practical 1: Intro to R & GIS~~
    -   11:30am - 11:50am -- Classification
    -   11:50am - 1:00pm -- Practical 2: Making a Map
-   Day 2:
    -   1:00pm - 1:20pm -- Recap and Making Maps
    -   1:20pm - 2:30pm -- Practical 3: Clustering of Crime Points
    -   2:30pm - 2:45pm -- break
    -   2:45pm - 4:00pm -- Practical 4: Bring Your Own Data
-->    

<!-- offline 
## Classification

-   Colour in the map to show the Total Vaccinations per 100 data
    -   *10 min*

![](images/map.png){.absolute bottom="0" right="0" width="750"}

::: footer
Remember to show in the table which colours represent which countries!
:::

## Classification

-   Colour in the map to show the Total Vaccinations per 100 data
-   Discuss your choices

## Classification

-   Colour in the map to show the Total Vaccinations per 100 data
-   Discuss your choices
    -   Colours
    -   Classification (how you grouped the data)

-->

<!-- end -->

##

![](images/InStatsStop.png)

## <!-- Blank slide -->

##

![](images/InStatsStart.png)

## <!-- Blank slide -->

![](images/WelcomeToInStats.png)

## 

<center><h1>Introduction to Spatial Data and R as a GIS</h1></center>

<p> <center>--</center>

<center> <h3>Session 2: Classification and Creating a Choropleth Map</h3></center>

## Classification

![](images/classification-exercise-map.png)

## Classification

- Go to [www.colorbrewer2.org](http://www.colorbrewer2.org)

![](images/color-brewer-screenshot.png)

## Classification {.smaller}

![](images/classification-exercise-map.png){.absolute bottom="0" width="1000"}

- Go to [www.colorbrewer2.org](http://www.colorbrewer2.org)
- How many classes would you use to categorise the data?
- What are those classes?
- What colour scheme would you use? Why?

## Classification

- Polls
- How many classes?
- What are those classes?
- Which colour scheme?

## Classification - Classes

- How many classes we choose is important
  - Max of 5-7
- What those classes are is important as well 
  - Equal Interval: 0-10, 10-20, 20-30, ….
  - Quantiles: first 10 data points, second 10 data points, ….
  - Natural Breaks / Jenks / Fisher
  - Standard Deviation: mean-1SD to mean, mean to mean+1SD, mean+1SD to mean+2SD, …
  - Unique

## Classification

![](images/classification-options.png)

::: footer
Figure 11 https://gistbok.ucgis.org/bok-topics/statistical-mapping-enumeration-normalization-classification
:::

## Classification

![](images/data-distribution.png)

## Classification

![](images/covid-example.png)

::: footer
James Cheshire (UCL) wrote an article about the press conference announcing the second lockdown in the UK (31/10/2020)

https://theconversation.com/next-slide-please-data-visualisation-expert-on-whats-wrong-with-the-uk-governments-coronavirus-charts-149329

https://jcheshire.com/resources/different-maps-same-data/
:::

------------------------------------------------------------------------

![](images/qgis-symbology-histogram.png)

## Classification - Colours

-   As well as classes, colours are important
-   How do you choose the colours?
-   Why is this important?
-   Output
-   User
-   Colorbrewer.org

![](images/color-brewer-screenshot.png){.absolute bottom="0" right="0" width="600"}

------------------------------------------------------------------------

## Classification

-   Cartography is a Science and an Art
-   Be creative
-   There is no 'right' answer
-   A bit like cookery
-   But we have covered some 'rules of thumb'

<!--

## Outline  {.smaller}

- 10:00am – 10:45am: What is GIS, Spatial Data & R?
- 10:45am – 11:30am: Practical 1: Intro to R & GIS
- 11:30am – 11:50am: Classification discussion
- 11:50am – 12:30pm: Practical 2: Making a Map
- 12:30pm - 1:30pm: Lunch
- 1:30pm – 2:00pm: Recap & Making Maps
- 2:00pm – 3:15pm: Practical 3: Clustering of Crime Points
- 3:15pm – 3:30pm: break
- 4:00pm - 4:30pm: Practical 4: Bring Your Own Data

-->
<!--
## Outline {.smaller}

-   1345 - 1400 Introduction
-   1400 - 1410 Colouring in exercise
-   1410 - 1420 Visualisation discussion
-   1420 - 1430 Presentation on GIS
-   1430 - 1450 Practical in QGIS
-   1450 - 1500 Coordinate Systems & Next Steps
-   1510 Finish
-->

## Outline  {.smaller}

-   **Day 1** - **Session 1: Introduction to R and Spatial Data Basics**
    -   ~~10:00am - 10:45am -- What is GIS & R?~~
    -   ~~10:45am - 11:30am -- Practical 1: Intro to R & GIS~~
    -   ~~*11:30am - 11:45am -- break*~~
-   **Day 1** Session 2: Classification and Creating a Choropleth Map
    -   11:45am - 12:05pm -- Classification
    -   12:05pm - 1:00pm -- Practical 2: Making a Map

    
<!-- NCRM

## Outline {.smaller}

-   **Day 1**:
    -   ~~10:00am - 10:45am -- What is GIS & R?~~
    -   ~~10:45am - 11:30am -- Practical 1: Intro to R & GIS~~
    -   ~~11:30am - 11:50am -- Classification~~
    -   11:50am - 1:00pm -- Practical 2: Making a Map
-   Day 2:
    -   1:00pm - 1:20pm -- Recap and Making Maps
    -   1:20pm - 2:30pm -- Practical 3: Clustering of Crime Points
    -   2:30pm - 2:45pm -- break
    -   2:45pm - 4:00pm -- Practical 4: Bring Your Own Data

-->

## 

![](images/InStatsStop.png)

## <!-- Blank slide -->

## Any Questions?

## Next session

- Tomorrow - Wed 5th March

- 10am - 1pm (UK/London time)

- Do post any further questions on the forum

- Recording should be available soon

## <!-- Blank slide -->

##

## Welcome Back - Day 2! {.smaller}

Outline

-   Day 1 - Session 1: Introduction to R and Spatial Data Basics
-   Day 1 - Session 2: Classification and Creating a Choropleth Map
-   **Day 2** - **Session 3: Map Customisation and Automation in R**
-   **Day 2** - Session 4: Clustering Crime Points and Working with Your Own Data


## Outline  {.smaller}

-   Day 1 - Session 1: Introduction to R and Spatial Data Basics
-   Day 1 - Session 2: Classification and Creating a Choropleth Map
-   **Day 2** - **Session 3: Map Customisation and Automation in R**
    -   10:00am - 10:15am -- GIS Data Types, Scale
    -   10:15am - 10:40am -- Map Automation in R: Loops
    -   10:30am - 11:30am -- Practical 2 ctd: Loops in R
    -   *11:30am - 11:45am -- break*
-   **Day 2** - Session 4: Clustering Crime Points and Working with Your Own Data
    - 11:45am - 12:00pm -- Point in Polygon & Reprojection
    - 12:00pm - 1:00pm -- Working with your Own Data



##

![](images/InStatsStart.png)


## <!-- Blank slide -->

![](images/WelcomeToInStats.png)

## 

<center><h1>Introduction to Spatial Data and R as a GIS</h1></center>

<p> <center>--</center>

<center> <h3>Session 3: Map Customisation and Automation in R</h3></center>

<!-- InStats -->



## Outline

- GIS Data Types
- Scale
- Map Automation in R

## Data Types: Vector & Raster

::: columns
::: {.column width="50%"}
  Points, Lines and Polygons
  
  ![](images\vector.png){width="60%"}
:::

::: {.column width="50%"}
::: {.fragment}
  Raster
  
  ![](images\raster.png)
:::
:::

:::

## Data Types: Vector & Raster {.smaller}

::: columns
::: {.column width="50%"}
  <b>Points, Lines and Polygons</b>

  ![](images\vector.png){width="60%"}
:::

::: {.column width="50%"}

- Points
  - GPS Points
  - Points of Interest (POI)
- Lines
  - Roads
  - Rivers
  - Railways
- Polygons
  - Building footprints
  - Lakes
  - Administrative areas
  - Counties
  - Countries

:::
:::

:::

## Data Types: Vector & Raster {.smaller}

::: columns
::: {.column width="50%"}
  <b>Raster</b>
  
  ![](images\raster.png)
:::

::: {.column width="50%"}
- Elevation
- Temperature
- Population density
- Land cover
- Light reflectance (satellite / aerial imagery)


:::

:::

## Data Types: Vector & Raster

::: columns
::: {.column width="50%"}
  Points, Lines and Polygons
  
  ![](images\vector.png){width="60%"}
:::

::: {.column width="50%"}
  Raster
  
  ![](images\raster.png)
:::
:::

:::

## File Types


|                      | Vector | Raster |
|----------------------|--------|--------|
| Shapefile *`.shp`*   | X      |        |
| GeoPackage *`.gpkg`* | X      | X      |  
| ASCII Grid           |        | X      |  
| GeoJSON              | X      |        |  
| ....                 |        |        |  


## Spatial Data

- Data is crucial to GIS
- ~50% of time doing a GIS project is spent finding data or getting data into the right format!
- Finding data can be a real pain
- Previous work **should** reference where they get data from 
  - If not, it’s a reasonable question to ask the author
- There is no one list of data, but some useful sources

## Spatial Data 

- Great Britain*
  - Ordnance Survey / OS Open Data
  - Census & Boundaries - [borders.ukdataservice.ac.uk](https://borders.ukdataservice.ac.uk/)
- Europe* - EuroStat
- Global
  - Free GIS Data, Robin Wilson - [freegisdata.rtwilson.com](http://freegisdata.rtwilson.com/)
  - National and sub-national - [GeoBoundaries.org](http://GeoBoundaries.org)
- Google Search – shapefile / geopackage / GIS data


## Spatial Data

Is the data any use?

- Location (where does it cover?)
- Variables / columns (what does it cover?)
- How old is the data? (when does it cover?)
- What projection & coordinate system is the data in?
- What scale is the data at?


## Scale {.smaller}

::: columns
:::: {.column width="33%"}
![](images/lego-bus-1.png)

- Small number of bricks
- Low level of detail

<font size="2">*https://www.youtube.com/watch?v=TcGIL21yqS4&list=PLwLYQ8o7Is3R3-6hTWzg2CK_iaxg5tsoZ&index=5&t=0s*</font>

::::
:::: {.column width="33%"}
![](images/lego-bus-2.png)

- Medium number of bricks
- Medium level of detail

<font size="2">*https://www.amazon.co.uk/LEGO-Creator-London-40220-361329/*</font>
::::
:::: {.column width="33%"}
![](images/lego-bus-3.png)

- Large number of bricks
- Large level of detail

<font size="2">*https://www.lego.com/en-gb/product/london-bus-10258*</font>
::::
:::

## Worldwide {.smaller}

::: columns
:::: {.column width="30%"}

1:100,000,000  
1:100m    

 (1cm = 1000km)

unit on map*
:
units in real world

*usually printed map, adapted for screen, some variation depending on monitor size, resolution…*

::::

:::: {.column width="70%"}

![](images/world.png)

::::
:::

## Large Country/Continent {.smaller}

::: columns
:::: {.column width="30%"}

Brazil / South America

1:30,000,000	  1:30m    

(1cm = 300km)

::::

:::: {.column width="70%"}

![](images/south-america.png)

::::
:::

## Small Country {.smaller}

::: columns
:::: {.column width="30%"}

UK

1:8,000,000	  1:8m    

(1cm = 80km)


::::

:::: {.column width="70%"}

![](images/uk.png)

::::
:::

## Local / City {.smaller}

::: columns
:::: {.column width="30%"}

Hull	

1: 100,000	1:100k    

1cm = 1 km



::::

:::: {.column width="70%"}

![](images/hull.png)

::::
:::

## Local / City {.smaller}

::: columns
:::: {.column width="30%"}

Hull	

1: 50,000	1:50k    

1cm = 0.5 km

![](images/landranger.png)


::::

:::: {.column width="70%"}

![](images/hull2.png)

::::
:::

## Scale

![](images/world.png){ width="20%" }
![](images/south-america.png){ width="20%" }
![](images/uk.png){ width="20%" }
![](images/hull.png){ width="20%" }

![](images/scale-range.png)

## Level of Detail

![](images/lod-range.png)


![](images/lego-bus-1.png){ width="30%" }
![](images/lego-bus-2.png){ width="30%" }
![](images/lego-bus-3.png){ width="30%" }

## Scale & Level of Detail {.smaller}

![](images/world.png){ width="20%" }
![](images/south-america.png){ width="20%" }
![](images/uk.png){ width="20%" }
![](images/hull.png){ width="20%" }

![](images/scale-range.png){ width="80%" }

![](images/lod-range.png){ width="80%" }


![](images/lego-bus-1.png){ width="15%" }
![](images/lego-bus-2.png){ width="15%" }
![](images/lego-bus-3.png){ width="15%" }

Depends on size

## File Size

::: columns
:::: {.column width="50%"}

- More bricks = more data
- More data = bigger file
- In GIS, this is how much 
detail there is
- More detail means we can 
use it as a larger scale
- Generalisation

::::
:::: {.column width="50%"}

![](images/ch10-simplification.png){ width="80%"}

::::
:::

## 

::: columns
:::: {.column width="50%"}

![](images/ch10-simplification.png)

::::
:::: {.column width="50%"}

::: {.fragment}

- Is the detail important?

- Depends what you are going todo with the data

:::

::::
:::

## Static Data

::: columns
:::: {.column width="70%"}

![](images/ch2-scale.png)

::::
:::: {.column width="30%"}

- Static data
- No extra detail

:::

::::
:::

## Dynamic Data

![](images/world.png){ width="20%" }
![](images/south-america.png){ width="20%" }
![](images/uk.png){ width="20%" }
![](images/hull.png){ width="20%" }

![](images/scale-range.png)

- Dynamic data
- Extra detail on demand

## Static vs Dynamic

- Dynamic data
  - Dynamic scale - pulls in additional data (from internet)
  - Not editable / usable for analysis (no attribute table)
  - Useful if data changes
- Static data
  - Fixed scale - can’t get additional data (need another file)
  - Editable and usable for analysis (attribute table)
  - Does not update

## `tmap` Static vs Dynamic

::: columns
::: {.column width="50%"}
Static data `tmap_mode("plot")`
![](images/tmap_mode_plot.png)
:::

::: {.column width="50%"}
Dynamic basemap `tmap_mode("view")`
![](images/tmap_mode_view.png)
:::

:::

## R code in loops {auto-animate="true"}

- Standard map code

``` {.r}
tm_shape(LSOA) +
    # set column
	tm_polygons(fill = "Age00to04",
	)
```

## R code in loops {auto-animate="true"}

- Adding colours and classification method

``` {.r}
tm_shape(LSOA) +
    # set column, colours and classification method
	tm_polygons(fill = "Age00to04",
                fill.scale = tm_scale_intervals(
                  values = "brewer.greens", 
                  style = "jenks"),
              )
```

## R code in loops {auto-animate="true"}

- Adding legend

``` {.r}
tm_shape(LSOA) +
    # set column, colours and classification method
	tm_polygons(fill = "Age00to04",
                fill.scale = tm_scale_intervals(
                  values = "brewer.greens", 
                  style = "jenks"),
                fill.legend = tm_legend(
                  title = "Aged 0 to 4", 
                    size = 0.8)
              )
```

## R code in loops {auto-animate="true"}

- Adding scale bar, north arrow, title

``` {.r}
tm_shape(LSOA) +
    # set column, colours and classification method
	tm_polygons(fill = "Age00to04",
                fill.scale = tm_scale_intervals(
                  values = "brewer.greens", 
                  style = "jenks"),
                fill.legend = tm_legend(
                  title = "Aged 0 to 4", 
                    size = 0.8)
              ) +
  # add scale bar
    tm_scalebar(position = c(0.1, 0.1)) + 
  # north arrow
    tm_compass(size = 1.5, position = c(0.1, 0.3)) +
  # set title details
    tm_title("Total Population of Liverpool, 2021")
```

## Exporting Maps {auto-animate="true"}

- Same as before

``` {.r}
tm_shape(LSOA) +
    # set column, colours and classification method
	tm_polygons(fill = "Age00to04",
                fill.scale = tm_scale_intervals(
                  values = "brewer.greens", 
                  style = "jenks"),
                fill.legend = tm_legend(
                  title = "Aged 0 to 4", 
                    size = 0.8)
              )
```

## Exporting Maps {auto-animate="true"}

- Same as before with `tmap_same(m)`

``` {.r code-line-numbers="1-12|1|11-12|1-12"}
m <- tm_shape(LSOA) +
    # set column, colours and classification method
  	tm_polygons(fill = "Age00to04",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
#save map
tmap_save(m)
```

## Loops for Multiple Maps {auto-animate="true"}

- Same as before - with `for () {}` loop

``` {.r code-line-numbers="1-18|5-16|1-4,17-18|1-18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(mapvariables)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = mapvariables[i],
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[i],".png"))
    #end loop
  }
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="1-18|1-2|3-4,18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(mapvariables)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = mapvariables[i],
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[i],".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="1-4,18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:3) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = mapvariables[i],
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[i],".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="5-6|7"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(4)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = mapvariables[i],
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[i],".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="2,7"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(4)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = mapvariables[1],
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[i],".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="7|7-14"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(4)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Total",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[i],".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="15-16"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(4)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Total",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[i],".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="15-16"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(4)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Total",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[1],".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="15-16"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(4)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Total",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-","Total",".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="15-16"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(4)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Total",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = "map-Total.png")
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="17-18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(4)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Total",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = "map-Total.png")
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

<!-- start loop again, i = 2 -->

``` {.r code-line-numbers="1-18|1-2,7,18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(mapvariables)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = mapvariables[i],
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[i],".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="1-2,7,18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(mapvariables)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = mapvariables[2],
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[i],".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="1-2,7,16,18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(mapvariables)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Age00to04",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[2],".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="1-2,7,16,18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(mapvariables)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Age00to04",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-","Age00to04",".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

<!-- i = 3 -->

``` {.r code-line-numbers="1-18|2,4,7,16,18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(mapvariables)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "mapvariables[3]",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-",mapvariables[3] ,".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}

``` {.r code-line-numbers="2,4,7,16,18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(mapvariables)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Age05to09",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-","Age05to09",".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}


``` {.r code-line-numbers="4|18"}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(mapvariables)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Age05to05",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-","Age05to09",".png"))
  #end loop
} 
```

## Loops for Multiple Maps {auto-animate="true"}


``` {.r}
#set which variables will be mapped
mapvariables <- c("Total", "Age00to04", "Age05to09")
#loop through for each map
for (i in 1:length(mapvariables)) {
  m <- tm_shape(LSOA) +
      # set column, colours and classification method
  	tm_polygons(fill = "Age05to05",
                  fill.scale = tm_scale_intervals(
                    values = "brewer.greens", 
                    style = "jenks"),
                  fill.legend = tm_legend(
                    title = "Aged 0 to 4", 
                      size = 0.8)
                )
    #save map
      tmap_save(m, filename = paste0("map-","Age05to09",".png"))
  #end loop
} 
```

Questions?

<!-- one day
## Outline {.smaller}

-   **Day 1**:
    -   ~~10:00am - 10:45am -- What is GIS & R?~~
    -   ~~10:45am - 11:30am -- Practical 1: Intro to R & GIS~~
    -   ~~11:30am - 11:50am -- Classification~~
    -   11:50am - 1:00pm -- Practical 2: Making a Map
-   Day 2:
    -   1:00pm - 1:20pm -- Recap and Making Maps
    -   1:20pm - 2:30pm -- Practical 3: Clustering of Crime Points
    -   2:30pm - 2:45pm -- break
    -   2:45pm - 4:00pm -- Practical 4: Bring Your Own Data
-->

##

![](images/InStatsStop.png)

##

## Outline  {.smaller}

-   **Day 2** - **Session 3: Map Customisation and Automation in R**
    -   ~~10:00am - 10:15am -- GIS Data Types, Scale~~
    -   ~~10:15am - 10:40am -- Map Automation in R: Loops~~
    -   ~~10:30am - 11:30am -- Practical 2 ctd: Loops in R~~
    -   *11:30am - 11:45am -- break*
-   **Day 2** - Session 4: Clustering Crime Points and Working with Your Own Data
    - 11:45am - 12:00pm -- Point in Polygon & Reprojection
    - 12:00pm - 1:00pm -- Working with your Own Data

##

## Outline  {.smaller}

-   ~~**Day 2** - Session 3: Map Customisation and Automation in R~~
    -   ~~10:00am - 10:15am -- GIS Data Types, Scale~~
    -   ~~10:15am - 10:40am -- Map Automation in R: Loops~~
    -   ~~10:30am - 11:30am -- Practical 2 ctd: Loops in R~~
    -   ~~*11:30am - 11:45am -- break*~~
-   **Day 2** - **Session 4: Clustering Crime Points and Working with Your Own Data**
    - 11:45am - 12:00pm -- Point in Polygon & Reprojection
    - 12:00pm - 1:00pm -- Working with your Own Data


## <!-- Blank slide -->

![](images/InStatsStart.png)

## <!-- Blank slide -->

![](images/WelcomeToInStats.png)

## 

<center><h1>Introduction to Spatial Data and R as a GIS</h1></center>

<p> <center>--</center>

<center> <h3>Session 4: Clustering Crime Points and Working with your Own Data</h3></center>

## Spatial Data in R: sf and sp

- So far we have used `sf` library for all our code
- `sp` is a much older spatial library,  now depreciated (end 2023)
- Uses `@data` to access attribute table
- May still come across it online / Stack Exchange
- Be aware!
- *Lots of gory details in [four part blog post](https://r-spatial.org/r/2023/05/15/evolution4.html) on [r-spatial.org](https://r-spatial.org/)*

## `tmap` and `ggplot`

- Many different mapping libraries

-  `tmap` and `ggplot` are the most common

- `tmap` a bit simpler to use

- `ggplot` more flexible but also more complex

## Joining

::: columns
::: {.column width="50%"}
- *Left / Right / Full / Inner*

- Which data is kept (or dropped)

- GIS is usually on the left

- `var1` would be spatial data

- [cghlewis.com/blog/joins
](https://cghlewis.com/blog/joins
)

:::

::: {.column width="50%"}
![](images/joins.png)
:::

:::

## Point in Polygon

![](images/point-in-polygon.png)

Points = crimes

Polygons = LSOA

## Point in Polygon

::: columns
::: {.column width="50%"}
![](images/pip1.png)
:::

::: {.column width="50%"}
![](images/pip2.png)
:::

:::

## Reprojection

1. Read in data

``` {.r}
#Read the data into a variable called crimes
crimes <- read.csv("police-uk-2020-04-merseyside-street.csv")
```

2. Turn into spatial data

``` {.r}
#create crimes data 
crimes_sf <- st_as_sf(crimes, coords = c('Longitude', 'Latitude'), crs = 4326)
```

3. Reproject to BNG

``` {.r}
#reproject to British National Grid, from Latitude/Longitude
crimes_sf_bng <- st_transform(crimes_sf, crs = 27700)
```

## Point in Polygon

::: columns
::: {.column width="50%"}
![](images/pip1.png)
:::

::: {.column width="50%"}

:::

:::

## Point in Polygon

4. Spatial join

```{.r}
#perform spatial join
LSOA_crimes <- st_join(LSOA, crimes_sf_bng)
```

5. Aggregate by LSOA

```{.r}
#Aggregate by LSOA #might take a few seconds to run
LSOA_crimes_aggregated <- aggregate(x = LSOA_crimes, 
  by = list(LSOA_crimes$lsoa21cd), FUN = length)
```

6. Tidy up

```{.r}
#remove additional columns
LSOA_crimes_aggregated <- LSOA_crimes_aggregated[,1:2]

#rename columns
colnames(LSOA_crimes_aggregated) <- c("lsoa21cd", "count of crimes","geometry")
```

## Point in Polygon

::: columns
::: {.column width="50%"}
![](images/pip1.png)
:::

::: {.column width="50%"}
![](images/pip2.png)
:::

:::

## Break 

## Working with your own data

## Wrap up slide 326 onwards

<!--

## Adding Delimited Text Layers

-   If we have coordinates for data, we can add them to QGIS

![](images/world-cities-csv-excel.png){.absolute bottom="50" left="0" width="350"}

![](images/world-cities.png){.absolute .fragment bottom="150" right="0" width="700"}

## Geocoding

-   Can also do this with address data
-   Postcodes -\> coordinates -\> plot on map

## Next Steps

-   Repeat this material in 2-3 weeks / 2-3 months
-   Lots of free tutorials available online
-   GIS Training Courses
    -   [www.geospatialtrainingsolutions.co.uk](www.geospatialtrainingsolutions.co.uk)
-   Books:
    -   GIS: Research Methods, £13, available today
    -   QGIS Map Design \|
    -   An Introduction to R for Spatial Analysis and Mapping
    -   Cartography: An Introduction

## Thank you & questions

-   Repeat this material in 2-3 weeks / 2-3 months
-   GIS Training Courses
    -   [www.geospatialtrainingsolutions.co.uk](www.geospatialtrainingsolutions.co.uk)
-   Books:
    -   GIS: Research Methods, £13, available today

-->

## Next Session

- Save your work 
  - **script** (everyone) 
  - **workspace/environment** (if you want to)

- Two stars, one wish poll

<!-- - Everyone post a question in Zoom that you have about today’s topics or working with R / RStudio -->

## Next Session

<!-- - Everyone post a question in Zoom that you have about today’s topics or working with R / RStudio -->

- Next session **Wednesday 1pm**

- Experiment with your own data – questions 

- Explore some more of the options

- Find some data relevant to your work 

<!-- -  *Opt. ggplot2 tutorial, e.g. https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html* -->


